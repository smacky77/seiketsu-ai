"use client"

import { createContext, useContext, useEffect, useState, type ReactNode } from 'react'
import { useRouter } from 'next/navigation'
import { useAuthStore } from '@/lib/stores/auth-store'
import { apiClient } from '@/lib/api/client'
import type { User, Organization } from '@/types'

interface AuthContextType {
  isLoading: boolean
  login: (email: string, password: string) => Promise<void>
  logout: () => Promise<void>
  register: (userData: RegisterData) => Promise<void>
  refreshToken: () => Promise<void>
  resetPassword: (email: string) => Promise<void>
  verifyEmail: (token: string) => Promise<void>
}

interface RegisterData {
  email: string
  password: string
  firstName: string
  lastName: string
  organizationName?: string
  phoneNumber?: string
}

const AuthContext = createContext<AuthContextType | null>(null)

export function AuthProvider({ children }: { children: ReactNode }) {
  const [isLoading, setIsLoading] = useState(true)\n  const router = useRouter()\n  const { \n    user, \n    organization, \n    login: setAuthData, \n    logout: clearAuthData,\n    setLoading,\n    setError \n  } = useAuthStore()\n\n  // Initialize auth state on mount\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const token = localStorage.getItem('seiketsu_auth_token')\n        if (token) {\n          apiClient.setToken(token)\n          await refreshToken()\n        }\n      } catch (error) {\n        console.error('Failed to initialize auth:', error)\n        clearAuthData()\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    initializeAuth()\n  }, [])\n\n  // Set organization context when it changes\n  useEffect(() => {\n    if (organization) {\n      apiClient.setOrganization(organization.id)\n    }\n  }, [organization])\n\n  const login = async (email: string, password: string) => {\n    try {\n      setLoading(true)\n      setError(null)\n\n      const response = await apiClient.post<{\n        user: User\n        organization: Organization\n        token: string\n        refreshToken: string\n      }>('/api/auth/login', { email, password })\n\n      if (response.success && response.data) {\n        const { user, organization, token, refreshToken } = response.data\n        \n        // Store tokens\n        localStorage.setItem('seiketsu_auth_token', token)\n        localStorage.setItem('seiketsu_refresh_token', refreshToken)\n        \n        // Set API client token\n        apiClient.setToken(token)\n        apiClient.setOrganization(organization.id)\n        \n        // Update auth store\n        setAuthData(user, organization)\n        \n        // Redirect to dashboard\n        router.push(`/org/${organization.slug}/dashboard`)\n      } else {\n        throw new Error(response.message || 'Login failed')\n      }\n    } catch (error: any) {\n      setError(error.message || 'Login failed')\n      throw error\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const logout = async () => {\n    try {\n      setLoading(true)\n      \n      // Call logout endpoint to invalidate server-side session\n      await apiClient.post('/api/auth/logout').catch(() => {\n        // Ignore errors - we're logging out anyway\n      })\n      \n      // Clear local storage\n      localStorage.removeItem('seiketsu_auth_token')\n      localStorage.removeItem('seiketsu_refresh_token')\n      \n      // Clear API client\n      apiClient.clearToken()\n      apiClient.clearOrganization()\n      \n      // Clear auth store\n      clearAuthData()\n      \n      // Redirect to login\n      router.push('/login')\n    } catch (error) {\n      console.error('Logout error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const register = async (userData: RegisterData) => {\n    try {\n      setLoading(true)\n      setError(null)\n\n      const response = await apiClient.post<{\n        user: User\n        organization: Organization\n        token: string\n        refreshToken: string\n      }>('/api/auth/register', userData)\n\n      if (response.success && response.data) {\n        const { user, organization, token, refreshToken } = response.data\n        \n        // Store tokens\n        localStorage.setItem('seiketsu_auth_token', token)\n        localStorage.setItem('seiketsu_refresh_token', refreshToken)\n        \n        // Set API client token\n        apiClient.setToken(token)\n        apiClient.setOrganization(organization.id)\n        \n        // Update auth store\n        setAuthData(user, organization)\n        \n        // Redirect to onboarding\n        router.push(`/org/${organization.slug}/onboarding`)\n      } else {\n        throw new Error(response.message || 'Registration failed')\n      }\n    } catch (error: any) {\n      setError(error.message || 'Registration failed')\n      throw error\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const refreshToken = async () => {\n    try {\n      const refreshToken = localStorage.getItem('seiketsu_refresh_token')\n      if (!refreshToken) {\n        throw new Error('No refresh token available')\n      }\n\n      const response = await apiClient.post<{\n        user: User\n        organization: Organization\n        token: string\n        refreshToken: string\n      }>('/api/auth/refresh', { refreshToken })\n\n      if (response.success && response.data) {\n        const { user, organization, token, refreshToken: newRefreshToken } = response.data\n        \n        // Update tokens\n        localStorage.setItem('seiketsu_auth_token', token)\n        localStorage.setItem('seiketsu_refresh_token', newRefreshToken)\n        \n        // Update API client\n        apiClient.setToken(token)\n        apiClient.setOrganization(organization.id)\n        \n        // Update auth store\n        setAuthData(user, organization)\n      } else {\n        throw new Error('Token refresh failed')\n      }\n    } catch (error) {\n      console.error('Token refresh failed:', error)\n      clearAuthData()\n      throw error\n    }\n  }\n\n  const resetPassword = async (email: string) => {\n    try {\n      setLoading(true)\n      setError(null)\n\n      const response = await apiClient.post('/api/auth/reset-password', { email })\n      \n      if (!response.success) {\n        throw new Error(response.message || 'Password reset failed')\n      }\n    } catch (error: any) {\n      setError(error.message || 'Password reset failed')\n      throw error\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const verifyEmail = async (token: string) => {\n    try {\n      setLoading(true)\n      setError(null)\n\n      const response = await apiClient.post('/api/auth/verify-email', { token })\n      \n      if (!response.success) {\n        throw new Error(response.message || 'Email verification failed')\n      }\n      \n      // Refresh user data after verification\n      if (user) {\n        await refreshToken()\n      }\n    } catch (error: any) {\n      setError(error.message || 'Email verification failed')\n      throw error\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const value: AuthContextType = {\n    isLoading,\n    login,\n    logout,\n    register,\n    refreshToken,\n    resetPassword,\n    verifyEmail,\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n\n// Higher-order component for protected routes\nexport function withAuth<P extends object>(Component: React.ComponentType<P>) {\n  return function AuthenticatedComponent(props: P) {\n    const { user, isAuthenticated } = useAuthStore()\n    const { isLoading } = useAuth()\n    const router = useRouter()\n\n    useEffect(() => {\n      if (!isLoading && !isAuthenticated) {\n        router.push('/login')\n      }\n    }, [isLoading, isAuthenticated, router])\n\n    if (isLoading) {\n      return (\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      )\n    }\n\n    if (!isAuthenticated || !user) {\n      return null\n    }\n\n    return <Component {...props} />\n  }\n}\n\n// Hook for role-based access control\nexport function usePermissions() {\n  const { user, hasPermission, hasAnyPermission } = useAuthStore()\n  \n  return {\n    user,\n    hasPermission,\n    hasAnyPermission,\n    isAdmin: user?.role === 'admin',\n    isManager: user?.role === 'manager',\n    isAgent: user?.role === 'agent',\n    canViewLeads: hasPermission('leads.view'),\n    canEditLeads: hasPermission('leads.edit'),\n    canViewAgents: hasPermission('agents.view'),\n    canManageAgents: hasAnyPermission(['agents.create', 'agents.edit', 'agents.delete']),\n    canViewAnalytics: hasPermission('analytics.view'),\n    canManageSettings: hasPermission('settings.edit'),\n    canManageUsers: hasPermission('users.manage'),\n  }\n}"
version: '3.8'

services:
  # Main API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://seiketsu_user:${DB_PASSWORD:-seiketsu_pass}@postgres:5432/seiketsu_ai
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
      - ELEVEN_LABS_API_KEY=${ELEVEN_LABS_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TWENTYONE_DEV_API_KEY=${TWENTYONE_DEV_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - seiketsu-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./reports:/app/reports
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=seiketsu_ai
      - POSTGRES_USER=seiketsu_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-seiketsu_pass}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - seiketsu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U seiketsu_user -d seiketsu_ai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - seiketsu-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://seiketsu_user:${DB_PASSWORD:-seiketsu_pass}@postgres:5432/seiketsu_ai
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
      - ELEVEN_LABS_API_KEY=${ELEVEN_LABS_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TWENTYONE_DEV_API_KEY=${TWENTYONE_DEV_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - seiketsu-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./reports:/app/reports

  # Celery beat scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: celery -A app.tasks.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://seiketsu_user:${DB_PASSWORD:-seiketsu_pass}@postgres:5432/seiketsu_ai
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
    depends_on:
      - postgres
      - redis
    networks:
      - seiketsu-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: celery -A app.tasks.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - redis
    networks:
      - seiketsu-network
    restart: unless-stopped


volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  seiketsu-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
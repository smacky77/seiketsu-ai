name: Comprehensive Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  
jobs:
  # Backend Unit Tests
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: seiketsu_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
    
    - name: Install dependencies
      working-directory: apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Set up test environment
      working-directory: apps/api
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/seiketsu_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379/1" >> .env.test
        echo "ENVIRONMENT=test" >> .env.test
      env:
        TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/seiketsu_test
        TEST_REDIS_URL: redis://localhost:6379/1
    
    - name: Run database migrations
      working-directory: apps/api
      run: |
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/seiketsu_test
    
    - name: Run unit tests with coverage
      working-directory: apps/api
      run: |
        pytest \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --cov-fail-under=80 \
          -v \
          -m "unit and not slow" \
          --durations=10
      env:
        TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/seiketsu_test
        TEST_REDIS_URL: redis://localhost:6379/1
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: apps/api/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Archive coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage
        path: apps/api/htmlcov/

  # Backend Integration Tests  
  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    needs: backend-unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: seiketsu_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      working-directory: apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run integration tests
      working-directory: apps/api
      run: |
        pytest \
          -v \
          -m "integration" \
          --durations=10 \
          --tb=short
      env:
        TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/seiketsu_test
        TEST_REDIS_URL: redis://localhost:6379/1

  # Security Tests
  security-tests:
    name: Security & OWASP Tests
    runs-on: ubuntu-latest
    needs: backend-unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: seiketsu_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      working-directory: apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run security tests
      working-directory: apps/api
      run: |
        pytest \
          -v \
          -m "security" \
          --tb=short
      env:
        TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/seiketsu_test
    
    - name: Run Bandit security scan
      working-directory: apps/api
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: apps/api/bandit-report.json

  # Frontend Unit Tests
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json
    
    - name: Install dependencies
      working-directory: apps/web
      run: npm ci
    
    - name: Run unit tests with coverage
      working-directory: apps/web
      run: |
        npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: apps/web/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Archive coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage
        path: apps/web/coverage/

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-unit-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: seiketsu_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json
    
    - name: Set up Python for backend
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install backend dependencies
      working-directory: apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      working-directory: apps/web
      run: npm ci
    
    - name: Install Playwright browsers
      working-directory: apps/web
      run: npx playwright install --with-deps
    
    - name: Build frontend
      working-directory: apps/web
      run: npm run build
    
    - name: Start backend server
      working-directory: apps/api
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/seiketsu_test
    
    - name: Start frontend server
      working-directory: apps/web
      run: |
        npm start &
        sleep 15
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
    
    - name: Run E2E tests
      working-directory: apps/web
      run: npx playwright test
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: apps/web/playwright-report/
        retention-days: 30

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: backend-integration-tests
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[performance]')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: seiketsu_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      working-directory: apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run performance tests
      working-directory: apps/api
      run: |
        pytest \
          -v \
          -m "performance" \
          --benchmark-only \
          --benchmark-json=benchmark.json
      env:
        TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/seiketsu_test
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: apps/api/benchmark.json

  # Load Tests
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: performance-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[load-test]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      working-directory: apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Start API server
      working-directory: apps/api
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Run load tests
      working-directory: apps/api
      run: |
        locust \
          --locustfile tests/test_load_stress.py \
          --host http://localhost:8000 \
          --users 100 \
          --spawn-rate 10 \
          --run-time 300s \
          --html load-test-report.html \
          --headless
    
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-results
        path: apps/api/load-test-report.html

  # Contract Tests
  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    needs: backend-unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      working-directory: apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run contract tests
      working-directory: apps/api
      run: |
        pytest \
          -v \
          -m "contract" \
          --tb=short
    
    - name: Generate contract documentation
      working-directory: apps/api
      run: |
        python -c "
        import json
        # Generate API contract documentation
        contracts = {
          'apis': {
            'elevenlabs': {
              'base_url': 'https://api.elevenlabs.io',
              'endpoints': [
                'GET /v1/voices',
                'POST /v1/text-to-speech/{voice_id}',
                'GET /v1/user'
              ]
            },
            'openai': {
              'base_url': 'https://api.openai.com',
              'endpoints': [
                'POST /v1/chat/completions',
                'POST /v1/audio/transcriptions'
              ]
            }
          }
        }
        with open('api-contracts.json', 'w') as f:
          json.dump(contracts, f, indent=2)
        "
    
    - name: Upload contract documentation
      uses: actions/upload-artifact@v3
      with:
        name: api-contracts
        path: apps/api/api-contracts.json

  # Chaos Engineering Tests
  chaos-tests:
    name: Chaos Engineering
    runs-on: ubuntu-latest
    needs: [backend-integration-tests, performance-tests]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[chaos]')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: seiketsu_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      working-directory: apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install psutil
    
    - name: Run chaos engineering tests
      working-directory: apps/api
      run: |
        pytest \
          tests/chaos_engineering.py \
          -v \
          -m "chaos" \
          --tb=short \
          -s
      env:
        TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/seiketsu_test
    
    - name: Generate chaos engineering report
      working-directory: apps/api
      run: |
        python tests/chaos_engineering.py > chaos-report.txt 2>&1 || true
    
    - name: Upload chaos test results
      uses: actions/upload-artifact@v3
      with:
        name: chaos-test-results
        path: apps/api/chaos-report.txt

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [
      backend-unit-tests,
      backend-integration-tests,
      security-tests,
      frontend-unit-tests,
      e2e-tests,
      contract-tests
    ]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate test summary
      run: |
        echo "# Test Suite Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Results" >> test-summary.md
        echo "" >> test-summary.md
        
        # Check job results
        if [ "${{ needs.backend-unit-tests.result }}" = "success" ]; then
          echo "✅ Backend Unit Tests: PASSED" >> test-summary.md
        else
          echo "❌ Backend Unit Tests: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.backend-integration-tests.result }}" = "success" ]; then
          echo "✅ Backend Integration Tests: PASSED" >> test-summary.md
        else
          echo "❌ Backend Integration Tests: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.security-tests.result }}" = "success" ]; then
          echo "✅ Security Tests: PASSED" >> test-summary.md
        else
          echo "❌ Security Tests: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.frontend-unit-tests.result }}" = "success" ]; then
          echo "✅ Frontend Unit Tests: PASSED" >> test-summary.md
        else
          echo "❌ Frontend Unit Tests: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.e2e-tests.result }}" = "success" ]; then
          echo "✅ E2E Tests: PASSED" >> test-summary.md
        else
          echo "❌ E2E Tests: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.contract-tests.result }}" = "success" ]; then
          echo "✅ Contract Tests: PASSED" >> test-summary.md
        else
          echo "❌ Contract Tests: FAILED" >> test-summary.md
        fi
        
        echo "" >> test-summary.md
        echo "## Coverage Reports" >> test-summary.md
        echo "- Backend coverage reports available in artifacts" >> test-summary.md
        echo "- Frontend coverage reports available in artifacts" >> test-summary.md
        echo "" >> test-summary.md
        echo "## Artifacts Generated" >> test-summary.md
        echo "- Coverage reports (HTML and XML)" >> test-summary.md
        echo "- Playwright test results" >> test-summary.md
        echo "- Security scan results" >> test-summary.md
        echo "- Performance benchmarks" >> test-summary.md
        echo "- API contract documentation" >> test-summary.md
        
        cat test-summary.md
    
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: test-summary
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Notify on failure
      if: needs.test-summary.result == 'failure'
      run: |
        echo "Tests failed on main branch!"
        # Add notification logic (Slack, email, etc.)
        
    - name: Notify on success  
      if: needs.test-summary.result == 'success'
      run: |
        echo "All tests passed on main branch!"
        # Add success notification logic
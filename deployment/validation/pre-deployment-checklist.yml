# Seiketsu AI Pre-Deployment Validation Checklist
# Automated validation framework for safe production deployments

name: "Seiketsu AI Pre-Deployment Validation"
version: "1.0.0"
environment: "${DEPLOYMENT_ENV:-production}"

# Critical validation checkpoints that must pass before deployment
validation_groups:
  infrastructure:
    name: "Infrastructure Readiness"
    priority: "critical"
    checks:
      - name: "terraform_validation"
        description: "Validate Terraform configuration and resources"
        command: "cd infrastructure/terraform && terraform validate && terraform plan -detailed-exitcode"
        timeout: 300
        required: true
        
      - name: "aws_resources"
        description: "Verify AWS resource availability and quotas"
        command: "scripts/validate-aws-resources.sh"
        timeout: 120
        required: true
        
      - name: "database_connectivity"
        description: "Test database connections and schema readiness"
        command: "scripts/validate-database.sh"
        timeout: 60
        required: true
        
      - name: "redis_cluster"
        description: "Verify Redis cluster health and connectivity"
        command: "scripts/validate-redis.sh"
        timeout: 30
        required: true

  security:
    name: "Security & Compliance"
    priority: "critical"
    checks:
      - name: "ssl_certificates"
        description: "Validate SSL certificates and expiration dates"
        command: "scripts/validate-certificates.sh"
        timeout: 30
        required: true
        
      - name: "security_groups"
        description: "Audit security group configurations"
        command: "scripts/validate-security-groups.sh"
        timeout: 60
        required: true
        
      - name: "secrets_management"
        description: "Verify all secrets are properly configured"
        command: "scripts/validate-secrets.sh"
        timeout: 30
        required: true
        
      - name: "vulnerability_scan"
        description: "Run security vulnerability scan on containers"
        command: "scripts/vulnerability-scan.sh"
        timeout: 300
        required: true

  application:
    name: "Application Readiness"
    priority: "critical"
    checks:
      - name: "backend_tests"
        description: "Execute comprehensive backend test suite"
        command: "cd apps/api && python -m pytest --cov=. --cov-report=xml"
        timeout: 600
        required: true
        
      - name: "frontend_tests"
        description: "Execute frontend test suite with coverage"
        command: "cd apps/web && npm run test:ci"
        timeout: 300
        required: true
        
      - name: "integration_tests"
        description: "Run integration tests across all services"
        command: "scripts/run-integration-tests.sh"
        timeout: 900
        required: true
        
      - name: "voice_service_tests"
        description: "Test ElevenLabs voice service integration"
        command: "scripts/test-voice-service.sh"
        timeout: 120
        required: true

  performance:
    name: "Performance Validation"
    priority: "high"
    checks:
      - name: "load_testing"
        description: "Execute load tests with expected traffic patterns"
        command: "scripts/run-load-tests.sh"
        timeout: 1800
        required: true
        
      - name: "voice_latency"
        description: "Validate voice response times < 2 seconds"
        command: "scripts/test-voice-latency.sh"
        timeout: 300
        required: true
        
      - name: "api_performance"
        description: "Verify API response times < 500ms"
        command: "scripts/test-api-performance.sh"
        timeout: 180
        required: true
        
      - name: "database_performance"
        description: "Test database query performance under load"
        command: "scripts/test-database-performance.sh"
        timeout: 300
        required: true

  multi_tenant:
    name: "Multi-Tenant Validation"
    priority: "critical"
    checks:
      - name: "tenant_isolation"
        description: "Verify complete data isolation between tenants"
        command: "scripts/test-tenant-isolation.sh"
        timeout: 300
        required: true
        
      - name: "resource_allocation"
        description: "Test per-tenant resource allocation and limits"
        command: "scripts/test-resource-allocation.sh"
        timeout: 180
        required: true
        
      - name: "tenant_provisioning"
        description: "Test automated tenant creation and setup"
        command: "scripts/test-tenant-provisioning.sh"
        timeout: 240
        required: true

# Rollback conditions - if any of these conditions are met, rollback is triggered
rollback_triggers:
  performance:
    voice_response_time_p95: 5000  # milliseconds
    api_response_time_p95: 2000    # milliseconds
    error_rate_threshold: 5.0      # percentage
    memory_usage_threshold: 95.0   # percentage
    
  security:
    failed_auth_threshold: 100     # failed attempts per minute
    suspicious_activity: true      # any suspicious activity detected
    certificate_expiry_days: 7     # SSL certificate expiry warning
    
  availability:
    uptime_threshold: 99.0         # minimum uptime percentage
    consecutive_failures: 5        # consecutive health check failures
    database_unavailable: 120      # seconds of database unavailability

# Success criteria that must be met post-deployment
success_criteria:
  technical:
    voice_response_time_avg: 1500   # milliseconds
    api_response_time_p95: 500      # milliseconds
    error_rate_max: 0.1            # percentage
    uptime_min: 99.9               # percentage
    
  business:
    tenant_provisioning_time: 1800  # seconds (30 minutes)
    support_ticket_resolution: 14400 # seconds (4 hours)
    client_satisfaction_min: 8.5    # out of 10
    
# Notification settings for validation results
notifications:
  slack:
    webhook_url: "${SLACK_WEBHOOK_URL}"
    channel: "#deployments"
    on_success: true
    on_failure: true
    
  email:
    recipients: 
      - "ops@seiketsu-ai.com"
      - "dev@seiketsu-ai.com"
    on_critical_failure: true
    
  pagerduty:
    service_key: "${PAGERDUTY_SERVICE_KEY}"
    on_critical_failure: true

# Environment-specific configurations
env_configs:
  production:
    strict_validation: true
    require_manual_approval: true
    rollback_on_warning: false
    notification_level: "all"
    
  staging:
    strict_validation: false
    require_manual_approval: false
    rollback_on_warning: false
    notification_level: "errors_only"
    
  development:
    strict_validation: false
    require_manual_approval: false
    rollback_on_warning: false
    notification_level: "none"